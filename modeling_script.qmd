---
title: "Remove LC-MS Batch Effects Using Linear Models"
format: html
editor: visual
---

## Introduction

In analytical chemistry data there are often batch effects that confound data analysis. One source of batch effects is variation in instrument sensitivity across the course of the run. Here I analyze a dataset that is plagued by this type of batch effect, and I use a linear model to correct, or "subtract out" this effect. The result of this correction is data with improved accuracy and substantially lower variance among sample replicates.

## Procedure in R

**Import necessary libraries**

```{r}
#| message: false

library(tidyverse)
library(kableExtra)
library(cowplot)
```

**Import the data and view the structure**

```{r}
#| message: false

df <- read_csv("./yeast_3DG_dataset.csv")
df <- df %>% mutate(PA = `3-DG` + Inject_order*1.05 + (runif(1) * 20)) 
kbl(head(df)) %>% kable_styling(full_width=FALSE)
```

**Plot the entire dataset by injection order**

```{r}
ggplot(df, aes(x=Inject_order, y=PA)) +
  geom_point(aes(color=Strain), size=2.5) +
  theme_bw() +
  labs(x="injection order", y="peak area", color=NULL) +
  theme(axis.title = element_text(size=14),
        legend.text = element_text(size = 12)) 
 
```

It looks like there is a substantial batch effect but I think it will be more obvious if I facet the plot by strain.

**Plot again but facet wrap on Strain**

```{r}

ggplot(df, aes(x=Inject_order, y=PA)) +
  geom_point(aes(color=Strain), size=2.5) +
  facet_wrap("Strain") +
  theme_bw() +
  labs(x='injection order', y='peak area', color=NULL) +
  theme(axis.title = element_text(size=14),
        legend.text = element_text(size = 12))

```

There is a clear batch effect, with PAs increasing with injection order. Let's first investigate whether we can capture this effect with a linear model. Let's first create a model that predicts PA as a function of strain alone.

**Create the model using Strain as the only predictor**

```{r}

strain_only_model <- lm(PA ~ 0 + Strain, data = df)
summary(strain_only_model)
```

<br>

Next, let's see if a model that adds injection order fits the data better.

**Make a model that predicts using strain and injection order**

```{r}

comb_model <- lm(PA ~ 0 + Strain + Inject_order, data = df)
summary(comb_model)
```

The residuals are much smaller in the combined model and the adjusted R^2^ us higher. This tells us that the model with both strain and injection order as predictors fits the data better. Giving that the effect of injection order confounds our analysis of strain effect we will subtract the injecdtion order coefficient from the strain coefficients.

**Extract the coefficient for the injection order and use this to calculate a corrected PA**

```{r}

# extract the injection order coefficient 
injection_order_coef <- coef(comb_model)["Inject_order"]

# correct the PAs by subtracting (injection order coeffiient * injection order)
df$PA_corrected <- df$PA - (injection_order_coef * df$Inject_order)


```

**Now plot the corrected data**

```{r}

ggplot(df, aes(x=Inject_order, y=PA_corrected)) +
  geom_point(aes(color=Strain), size=2.5) +
  facet_wrap("Strain") +
  theme_bw() +
  labs(x='injection order', y='peak area') +
  theme(axis.title = element_text(size=14),
        legend.text = element_text(size = 12))

```

This corrected data looks much better. To get a sense for how much better the variability among replicates is, let's compare the replicates for each strain using a boxplot.

**Pivot the data into tidy format and creat the boxplot**

```{r}

df_long <- df %>%
  pivot_longer(cols = c(PA, PA_corrected), 
               names_to = "measurement_type", 
               values_to = "value")

ggplot(df_long, aes(x=Strain, y=value)) +
  geom_boxplot(aes(fill=measurement_type)) +
  labs(x="", y="corrected peak area", fill=NULL) +
  theme_bw() +
  theme(axis.title = element_text(size=14),
        axis.text = element_text(size=12),
        legend.text = element_text(size = 12)) 
                 
```

As expected, the boxplot shows that the variance among replicates is much better after the correction.

### 

### Further improvements

When building linear models, it is critical to examine diagnostic plots that report how well your model fits the data. These plots can reveal issues with the model that are more challenging to identify by assessing model summary statistics. The most basic, and often the most informative of these plots is the fitted vs. residuals plot.

Let's start by plotted fitted values vs. residuals for both the strain only model and the combined model.

**Make Fitted vs Residuals plots**

```{r}
# Get the residuals for this model and plot
df$strain_only_resid <- residuals(strain_only_model)

p1 <- ggplot(df, aes(x=PA, y=strain_only_resid)) +
  geom_point(size=2) +
  ylim(-70,70) +
  theme_bw() +
  labs(title='strain_only_model', y='residual')

p2 <- ggplot(df, aes(x=PA, y=comb_resid)) +
  geom_point(size=2) +
  ylim(-70,70) +
  theme_bw() +
  labs(title='comb_model', y='residual')

# Combine plots
plot_grid(p1, p2, ncol = 2)
```

Both plots reveal an issue with our models. The funnel-like shape of left plot shows heteroscedasticty where variance scales with the peak area. In the right plot, the overall variance is substantially reduced by included injection order as a predictor, but it is still heteroscedastic: Samples with intermediate peak areas have low variance relative to those with small or large peak areas. This suggests to me that the injection order coefficient that we subtracted away did represent the mean injection order effect, but that this mean was not a good estimate for the effect of injection order on samples with relatively small or large PAs.

This suggests it may be better to determine an injection order coefficient for each train individually and subtract this coefficient from the peak areas for that strain.

```{r}

interaction_model <- lm(PA ~ 0 + Strain + Strain:Inject_order, data = df)

summary(interaction_model)
```

```{r}


```

a -- the variance scales with the mean and is not constant across samples. Let's see if adding injection order fixes this issue.
